(self.webpackChunkca_docs=self.webpackChunkca_docs||[]).push([[990],{1079:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return i},default:function(){return u}});var r=n(2122),a=n(9756),s=(n(7294),n(3905)),o={sidebar_position:1},l={unversionedId:"strategy/python",id:"strategy/python",isDocsHomePage:!1,title:"Develop in Python",description:"What You Need To Know...",source:"@site/docs/strategy/python.mdx",sourceDirName:"strategy",slug:"/strategy/python",permalink:"/public/en/docs/strategy/python",editUrl:"https://github.com/Crypto-Arsenal/public/edit/master/docs/strategy/python.mdx",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Get Started",permalink:"/public/en/docs/intro"},next:{title:"Develop in Javascript",permalink:"/public/en/docs/strategy/javascript"}},i=[{value:"What You Need To Know...",id:"what-you-need-to-know",children:[]},{value:"Create My Cloud Strategy",id:"create-my-cloud-strategy",children:[{value:"Basic Coding Structure",id:"basic-coding-structure",children:[]},{value:"Advanced",id:"advanced",children:[]},{value:"A Simple Example: MA Cross Strategy",id:"a-simple-example-ma-cross-strategy",children:[]}]},{value:"Upload .pyc to the Cloud",id:"upload-pyc-to-the-cloud",children:[]}],c={toc:i};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"what-you-need-to-know"},"What You Need To Know..."),(0,s.kt)("p",null,"Here are hints for you to quickly develop your trading strategies:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Get started to develop your Strategy Class in compliance with Python 3."),(0,s.kt)("li",{parentName:"ul"},"There are dedicated interfaces to be coded along, please refer to 'Basic Coding Structure' as below; note that your strategy takes in current market trading data and must return results whether your trades are executed or not."),(0,s.kt)("li",{parentName:"ul"},"The life cycle of your trades/orders are maintained by your own strategy."),(0,s.kt)("li",{parentName:"ul"},"You can leverage off-the-shelf technical analysis indicators of ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/acrazing/talib-binding-node"},"TA-LIB")," for quickly develop your strategies."),(0,s.kt)("li",{parentName:"ul"},"You can record your trading data with ",(0,s.kt)("inlineCode",{parentName:"li"},"Log(str)"),".")),(0,s.kt)("h2",{id:"create-my-cloud-strategy"},"Create My Cloud Strategy"),(0,s.kt)("h3",{id:"basic-coding-structure"},"Basic Coding Structure"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Class name must be Strategy\nclass Strategy():\n    # option setting needed\n    def __setitem__(self, key, value):\n        self.options[key] = value\n\n    # option setting needed\n    def __getitem__(self, key):\n        return self.options.get(key, '')\n\n    def __init__(self):\n        # strategy property needed\n        self.subscribed_books = {\n            'Bitfinex': {\n                'pairs': ['ETH-USDT'],\n            },\n        }\n        self.period = 10 * 60\n        self.options = {}\n\n        # user defined class attribute\n        self.last_type = 'sell'\n\n\n    # called every self.period\n    def trade(self, information):\n        # for single pair strategy, user can choose which exchange/pair to use when launch, get current exchange/pair from information\n        exchange = list(information['candles'])[0]\n        pair = list(information['candles'][exchange])[0]\n        if self.last_type == 'sell':\n            self.last_type = 'buy'\n            return [\n                {\n                    'exchange': exchange,\n                    'amount': 1,\n                    'price': -1,\n                    'type': 'MARKET',\n                    'pair': pair,\n                },\n            ]\n        else:\n            self.last_type = 'sell'\n            return [\n                {\n                    'exchange': exchange,\n                    'amount': -1,\n                    'price': -1,\n                    'type': 'MARKET',\n                    'pair': pair,\n                },\n            ]\n        return []\n\n    def on_order_state_change(self, order):\n        Log(\"on order state change message: \" + str(order) + \" order price: \" + str(order[\"price\"]))\n\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"information")," above, returns the basic trading structure, ",(0,s.kt)("inlineCode",{parentName:"li"},"__init__")," returns all necessary parameters, for more details please refer to NodeJS document")),(0,s.kt)("h3",{id:"advanced"},"Advanced"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"You can access to ",(0,s.kt)("a",{parentName:"li",href:"http://www.numpy.org/"},"numpy")," by using np."),(0,s.kt)("li",{parentName:"ul"},"You can access to ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/mrjbq7/ta-lib"},"talib")," by using talib."),(0,s.kt)("li",{parentName:"ul"},"You can access to strategy parameters via ",(0,s.kt)("inlineCode",{parentName:"li"},"self['OPTION_NAME']"),".")),(0,s.kt)("h3",{id:"a-simple-example-ma-cross-strategy"},"A Simple Example: MA Cross Strategy"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class Strategy():\n    # option setting needed\n    def __setitem__(self, key, value):\n        self.options[key] = value\n\n    # option setting needed\n    def __getitem__(self, key):\n        return self.options.get(key, '')\n\n    def __init__(self):\n        # strategy property\n        self.subscribed_books = {\n            'Bitfinex': {\n                'pairs': ['ETH-USDT'],\n            },\n        }\n        self.period = 10 * 60\n        self.options = {}\n\n        # user defined class attribute\n        self.last_type = 'sell'\n        self.last_cross_status = None\n        self.close_price_trace = np.array([])\n        self.ma_long = 10\n        self.ma_short = 5\n        self.UP = 1\n        self.DOWN = 2\n\n    def on_order_state_change(self,  order):\n        Log(\"on order state change message: \" + str(order) + \" order price: \" + str(order[\"price\"]))\n\n    def get_current_ma_cross(self):\n        s_ma = talib.SMA(self.close_price_trace, self.ma_short)[-1]\n        l_ma = talib.SMA(self.close_price_trace, self.ma_long)[-1]\n        if np.isnan(s_ma) or np.isnan(l_ma):\n            return None\n        if s_ma > l_ma:\n            return self.UP\n        return self.DOWN\n\n\n    # called every self.period\n    def trade(self, information):\n        exchange = list(information['candles'])[0]\n        pair = list(information['candles'][exchange])[0]\n        target_currency = pair.split('-')[0]  #ETH\n        base_currency = pair.split('-')[1]  #USDT\n        base_currency_amount = self['assets'][exchange][base_currency]\n        target_currency_amount = self['assets'][exchange][target_currency]\n        # add latest price into trace\n        close_price = information['candles'][exchange][pair][0]['close']\n        self.close_price_trace = np.append(self.close_price_trace, [float(close_price)])\n        # only keep max length of ma_long count elements\n        self.close_price_trace = self.close_price_trace[-self.ma_long:]\n        # calculate current ma cross status\n        cur_cross = self.get_current_ma_cross()\n        if cur_cross is None:\n            return []\n        if self.last_cross_status is None:\n            self.last_cross_status = cur_cross\n            return []\n        # cross up\n        if self.last_type == 'sell' and cur_cross == self.UP and self.last_cross_status == self.DOWN:\n            Log('buying 1 unit of ' + str(target_currency))\n            self.last_type = 'buy'\n            self.last_cross_status = cur_cross\n            return [\n                {\n                    'exchange': exchange,\n                    'amount': 1,\n                    'price': -1,\n                    'type': 'MARKET',\n                    'pair': pair,\n                }\n            ]\n        # cross down\n        elif self.last_type == 'buy' and cur_cross == self.DOWN and self.last_cross_status == self.UP:\n            Log('assets before selling: ' + str(self['assets'][exchange][base_currency]))\n            self.last_type = 'sell'\n            self.last_cross_status = cur_cross\n            return [\n                {\n                    'exchange': exchange,\n                    'amount': -target_currency_amount,\n                    'price': -1,\n                    'type': 'MARKET',\n                    'pair': pair,\n                }\n            ]\n        self.last_cross_status = cur_cross\n        return []\n\n")),(0,s.kt)("h2",{id:"upload-pyc-to-the-cloud"},"Upload .pyc to the Cloud"),(0,s.kt)("p",null,"When using Python to develop you trading strategies, you can choose to upload your binary codes (.pyc) to our platform if you want to keep your source codes in private.\nMake sure using python3.6 to compile"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Compile your source codes with ",(0,s.kt)("inlineCode",{parentName:"li"},"python3 -m py_compile strategy.py"),"."),(0,s.kt)("li",{parentName:"ol"},"Find ",(0,s.kt)("inlineCode",{parentName:"li"},"strategy.cpython-36.pyc")," in ",(0,s.kt)("inlineCode",{parentName:"li"},"./__pycache__")),(0,s.kt)("li",{parentName:"ol"},"Go to My Strategy, under ",(0,s.kt)("inlineCode",{parentName:"li"},"Edit Strategy")," tab, check ",(0,s.kt)("inlineCode",{parentName:"li"},"Use Binary Code")," to upload your binary codes (.pyc).")))}u.isMDXComponent=!0}}]);